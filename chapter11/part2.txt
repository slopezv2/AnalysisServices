Available processing options
* Process Add: Partitions. adds new rows to a partition. It should only be used in a programmatic way. You should specify the query returning only new rows that must be added to
    to the partition, only the dictionaries are incrementally updated in derived structures. All the other derived structures are automatically recalculated. Model can be queried
    during and after a Process Add. If you use Process Add directly in the SSMS user interface. it repeats the same query defined in the partition and adds all the resulting rows
    to the existing ones.

* Process Clear: Database, Table, Partition. Drops all the data in the selected object. The affected objuects are no longer query-able after this command.
* Process Data: Table, Partition. Loads raw data in the selected object, also updating the columns dictionaries, whereas derided structures are not updated. Objects are not
    Query-able after this command- You should execute Process Recall or Process Default to make the data query-able.

* Process Default: Database, Table, Partition. Performs the necessary operations to make the marget object query-able. If the database, table or partition does not have data, 
    it performs a Process Data first. If dependent structures are not valid, it applies  a partial Process Recalc to only those invalid derived structures.
    A process Default operation completed at the database level is the only operation that guarantees that the table will be query-able after the operation.
    A Process Default operation made at the partition level does a conditional Process Data, you must run either Process Default at database or table level or a Process 
    Recalc  
* Including all the operations in a single trancsation is also a best practice.

* Process Defrag: NOT in UI for Database, Table. Rebuilds the column dictionaries without the need to access the data source to read the data again. It is exposed in the SSMS user interface for tables
    only. This is useful only when you remove partitions from a table or you refresh some partitions. If you use Process Defrag at the database level, data for the unprocessed
    tables tables is also loaded. This does not happen when it is run in a single table.

* Process Full: Database, Table, partition. 

You might want to separate process operations into different trancsations to save memory usage. During process operations, the tabular engine must keep in memory 2 versions of
the objects that are part of the transactions.

You can consider using Process Clear before Process full if you can afford out-of-service periods. Consider creating a database backup before Process Clear in case of any fail.

Strategies:
* Include several Process Full operations of partitions and tables in the same transaction: Model will always be query-able during processing. Requires more than the double the space
    required to store processed objects.
* Execute each Process Full operation in a separe transaction, longer execution time, query-able models during refresh, less memory required.

* Include Process Data of selected partitions and tables  followed by a single Process Recalc operation of the database in the same transaction.

* Execute Process Clear of partitions and tables to be processed in a first transaction and then Process Default of the Database in a second transaction. To optimize memory

* Execute Process Data of partitions and tables to be processed in a separate transactions and then Process Recalc in the last transaction.

* Execute Process Clear of partitions  and tables to be processed in a first transaction, then Process Data of partitions and tables in separate transactions and Process Recalc in
the last transaction. Severe constrainst on memory.

New Rows coming:
* Execute one or more Process Add Operations in a single transaction.
* Execute Process Add in the same transaction with Process Data commands on other partitions or tables, including a Process Recalc at the end

https://www.sqlbi.com/articles/using-process-add-in-tabular-models/

Process Add automation:
TMSL:
{
    "refresh":{
        "type":"add",
        "objects":[
            {
                "database":"Contoso",
                "table":"Sales",
                "partition":"Sales"
            }
        ],
        "overrides":[
            {
                "partitions":[
                    {
                        "originalObject":{
                            "database":"Contoso3",
                            "table":"Sales",
                            "partition":"Sales"
                        },
                        "source":{
                            "query":"SELECT * FROM [Analytics].[Sales] WHERE [Order Date] >= '20170211'"
                        }
                    }
                ]
            }
        ]
    }
}

